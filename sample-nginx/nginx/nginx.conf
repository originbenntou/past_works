# プロセス数を指定する（autoだとCPUコア数と同値にする）
worker_processes 1;

# worker process に cpu を割り当てる 001 010 100 のようにビットマスク表記（autoだと自動で均等に割り振る）
worker_cpu_affinity 1;
worker_rlimit_nofile 10240;

# プロセスIDを格納するファイル 起動するたびにIDは変わる
pid       /var/run/nginx.pid;
# エラーログの出力先 レベル設定も可
error_log /dev/stderr warn;

# クライアントからリクエストがあるとこのディレクティブを通る
events {
	# プロセスに同時にアクセスできるコネクションが1024
	# 1024はソフトリミット ポート数が理論上の限界値らしい？
    worker_connections 4096;
    multi_accept on;
	# mutexとは排他制御という意味
	# Nginxでは各ワーカープロセスはepollでイベントを監視し、最初にmutexを獲得できたプロセスが処理を実行する
	# accept_mutexがonのとき、ワーカープロセスはそれぞれ順番に排他的にイベントを獲得する
	# 逆にoffのときは、イベントはすべてのワーカープロセスに通知されリソースを浪費する
	# delayはワーカープロセスAがmutexを獲得したあと、次のワーカープロセスBがmutexを獲得可能になるまでの時間のこと
    accept_mutex_delay 100ms;
	# 多重化I/Oを実現するためのシステムコールの手法
	# select/poll/epoll/kqueue とあるが、epollが計算量が少なく性能的に優れている デフォルトもこれ
	# epollはカーネルにファイルディスクリプタの状態を問い合わせ、書き込みが完了しているイベントをクライアントへ返却する
	use epoll;
}

http {
	# includeファイルは設定ファイル内の任意の場所で用いることができ、可読性をあげるのに有効。ワイルドカードも利用可能
	# MIMEタイプと拡張子の関連付けを定義したファイルの読み込み
	# WEBサーバとブラウザはこのMIMEタイプを用いてデータの形式を指定
	include /etc/nginx/mime.types;

	# マッピングにない拡張子のdefaultを指定
	default_type text/plain;
	# エラー画面の時に Nginxのバージョンを表示するかどうかの設定
	# セキュリティ上、バージョンを表示することは好ましく無いのでoffとしておいた方がいい
	server_tokens off;

	# タイムアウトしたコネクションは即座にリセットされ、関連するメモリがすべて開放される
	# デフォルトはoff その場合FIN_WAIT1となる（関連メモリを維持した状態でソケットを閉じる）
	reset_timedout_connection on;
	# server_name が長すぎるときに値を増やすと良いらしい
	# 例えばAWSのデフォルトのELBエンドポイントをそのまま設定すると長すぎるぞってエラーになるらしい
	server_names_hash_bucket_size 128;

	# ログフォーマット mainという名前 不明な変数はググって
	log_format main '$remote_addr - $remote_user [$time_local] '
					'"$request" $status $body_bytes_sent '
					'"$http_referer" "$http_user_agent"';

	# $remote_addr    : クライアントのIPアドレス
	# $remote_user    : クライアントのユーザ名
	# $time_local     : アクセス日時
	# $request        : httpの要求URI
	# $status         : httpのステータス
	# $body_bytes_sent: 送信バイト数
	# $http_referer   : リファラーURL（遷移元URL）
	# $http_user_agent: ユーザエージェント情報（ブラウザ名・バージョン等）

	# 以下のフォーマットで指定できる
	# access_log path format gzip[=level] [buffer=size] [flush=time];
	access_log /var/log/access.log main;

	# onにする事でレスポンスヘッダとファイルの内容をまとめて送るようになり、少ないパケット数で効率良く送れる
	tcp_nopush on;
	# 通常TCPパケット・セグメントの容量いっぱいにデータを格納しようとするため、パケットの送信までにはどうしても待ち時間が発生する
	# onにする事でこの待ち時間を無くすことができ、結果パケット数と送信量を増やすことができる
	tcp_nodelay on;

	# 同じクライアントからの要求が指定の数に達するとコネクションを切断する
	keepalive_requests 100;
	# HTTPの持続的な接続時間 デフォルト75
	keepalive_timeout 0:

	# クライアントのリクエストヘッダとクライアントリクエストボディの読み込みのタイムアウト時間
	client_body_timeout 10;
	client_header_timeout 10;
	# クライアントへのレスポンス処理をsendfileシステムコールというAPIを使って行うかどうかで、
	# カーネル側でコンテンツの複写をもつことで、レスポンスの改善をはかる設定
	sendfile on;
	# sendfileのタイムアウトを設定
	send_timeout 10;

	# キャッシュパスとその他いろいろを設定
	# levels: キャッシュ保存場所の階層をを定義？
	# keys_zone: キャッシュ自体の名前 キャッシュ可能なサイズ
	# inactive: キャッシュ時間
	fastcgi_cache_path /data/nginx/cache levels=1:2 keys_zone=FASTCGI:10m inactive:5m;
	# キャッシュライフタイム
	fastcgi_cache_valid 200 302 10m;
	fastcgi_cache_valid 404 1m;
	# FastCGIサーバからの応答を読み込むために使われるバッファの設定（ペイロード部分）
	# この場合8kのバッファが8ページ デフォルトだとマシンが準備しているメモリページとサイズに依存
	fastcgi_buffers 8 8k;
	# FastCGIサーバから応答の最初の部分を読み込むために使われるバッファのsizeを設定
	# 応答ヘッダなどが最初の部分に当たるっぽい 前述で記述したサイズよりは小さくて良いらしい
	fastcgi_buffer_size 4k;
	# 上位サーバ(upstream server)への接続のタイムアウトを設定 60がデフォルト値で、75以上は設定負荷
	fastcgi_connect_timeout 60;
	# 上位サーバ(upstream server)へのリクエストの転送タイムアウトを設定 デフォルト 60
	fastcgi_send_timeout 60;
	# FastCGIの応答の読み取りタイムアウトを設定 デフォルト 60
	# PHPの処理などで応答までの最大となる時間を設定するのが良いとされる
	fastcgi_read_timeout
	# FastCGIのバッファリングがビジー状態になったときのバッファサイズ？
	fastcgi_busy_buffers_size
	# FastCGIサーバから一時ファイルへの応答のバッファリングが有効にされた場合、一時ファイルに一度に書き込まれるデータのsizeを制限する
	fastcgi_temp_file_write_size 16k;
	# FastCGIサーバーとの通信中にエラーが発生したときに、古くなったキャッシュ応答を使用できるケースを設定する
	fastcgi_cache_use_stale error timeout http_500;
	# 次のサーバーに 要求を渡すための試行回数を制限
	fastcgi_next_upstream_tries 0;

	# Nginxからのレスポンスをgzip圧縮してネットワークの負荷を減らす
	gzip on;
	# gzip圧縮の対象を設定 text/html は常に圧縮されるので書いちゃだめ
	# ワイルドカードでもOK
	gzip_types text/css application/javascript application/json application/font-woff application/font-tff image/gif image/png image/jpeg application/octet-stream;
	# リクエストヘッダのUAでgzip圧縮を許容しない項目を指定する 正規表現
	# 以下はIE4~6はgzip圧縮しない例
	gzip_disable MSIE [4-6]\.;
	# レスポンスヘッダに Vary: Accept-Encoding を付与する
	# クライアントとサーバーの間にキャッシュサーバーが存在する場合（例えばCloudFront）
	# クライアントからの Accept-Encoding: xxx のxxxに応じたキャッシュを取るために
	# サーバーからのレスポンスヘッダに Vary: Accept-Encoding が付与されている必要がある
	gzip_vary on;
	# 上述の gzip_vary で Accept-Encoding: gzip のキャッシュがキャッシュサーバーに保存される、と思ったらもう一つ設定が必要らしい
	# CloudFrontやCDNがプロキシとしてサーバーにリクエストをした場合ヘッダにViaヘッダが付与される
	# このヘッダが付与されている場合、サーバーはgzipでレスポンスをしなくなる
	# その事象を解除するための設定が以下
	# any 以外にも no-cache等プロキシサーバーからのリクエストヘッダに応じてgzipを有効にするかどうかを設定できる
	gzip_proxied any;
	# 応答の圧縮levelを設定
	# 1以上を設定しても比率はそこまで変化ないそう
	gzip_comp_level 1;
	# 応答を圧縮するうために使われるバッファのnumber と sizeを設定 fastcgi_bufferと同じ
	gzip_buffers 8 8k;
	# 応答の圧縮が要求されるリクエストの最小のHTTPバージョンを設定
	gzip_http_version 1.1;
	# gzip圧縮した際のレスポンスの最低限の長さを指定する
	gzip_min_length 1000;

	# サーバ証明書とプライベート鍵の指定
	ssl_certificate /etc/nginx/cert.pem;
	ssl_certificate_key /etc/nginx/cert.key;

	# SSLセッションキャッシュの種類とサイズを指定
	# サーバの負荷を削減するためにはsharedを使うのが望ましい
	# すべてのワーカープロセスで共有。「shared:名前:サイズ」の形式で記述
	ssl_session_cache shared:SSL:10m;
	# SSLセッションキャッシュのタイムアウト
	ssl_session_timeout 10m;

	include /etc/nginx/conf.d/*.conf;
}
